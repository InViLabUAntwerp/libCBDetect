name: Build wheels (Ubuntu, macOS & Windows)

on:
  [push, pull_request]

jobs:
  build_wheels:
    name: cibuildwheel âžœ ${{ matrix.os }}
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [windows-latest]

    env:
      # Skip PyPy builds to keep the matrix lean
      CIBW_SKIP: "pp*"

      CIBW_MANYLINUX_X86_64_IMAGE: manylinux_2_28
      CIBW_BEFORE_BUILD_LINUX: |
        yum install -y epel-release && \
        yum install -y opencv opencv-devel

      CIBW_ENVIRONMENT_LINUX: |
        OpenCV_DIR=/usr/lib/$(uname -m)-linux-gnu/cmake/opencv4

      CIBW_ARCHS_WINDOWS: AMD64
      # OpenCV installation is now handled in the "Set up OpenCV on Windows" step

      MACOSX_DEPLOYMENT_TARGET: '14.0'
      CIBW_ENVIRONMENT: 'MACOSX_DEPLOYMENT_TARGET=14.0'
      CIBW_BEFORE_BUILD_MACOS: "brew install opencv"

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install build tooling
        run: python -m pip install --upgrade pip cibuildwheel==2.23.3 build==1.2.2.post1 wheel==0.45.1

      - name: Set up OpenCV on Windows
        if: runner.os == 'Windows'
        run: |
          $ver='4.11.0'
          $exe="$env:TEMP\opencv.exe"
          Invoke-WebRequest -Uri "https://github.com/opencv/opencv/releases/download/$ver/opencv-$ver-windows.exe" -OutFile $exe
          Start-Process -FilePath $exe -ArgumentList "-y","-oC:\" -NoNewWindow -Wait
          Remove-Item $exe
          $base='C:\opencv'

          # Search for OpenCVConfig.cmake in the entire OpenCV directory
          Write-Host "Searching for OpenCVConfig.cmake in $base..."
          $opencv_config = Get-ChildItem -Path $base -Recurse -Filter "OpenCVConfig.cmake" | Select-Object -First 1

          if ($opencv_config) {
            $cmake_dir = $opencv_config.Directory.FullName
            Write-Host "Found OpenCVConfig.cmake in $cmake_dir"

            # Find the bin directory (usually at the same level as lib)
            $parent_dir = Split-Path -Parent $cmake_dir
            $bin_dir = if (Test-Path "$parent_dir\bin") { "$parent_dir\bin" } else { "$base\build\x64\vc16\bin" }

            Write-Host "Using bin directory: $bin_dir"

            # Add bin directory to PATH
            $env:Path += ";$bin_dir"

            # Set OpenCV_DIR for CMake to find OpenCV
            $env:OpenCV_DIR = $cmake_dir

            # Set environment variables for subsequent steps
            echo "OpenCV_DIR=$cmake_dir" | Out-File -FilePath $env:GITHUB_ENV -Append
            echo "OPENCV_BIN=$bin_dir" | Out-File -FilePath $env:GITHUB_ENV -Append

            # List files in the OpenCV_DIR to verify contents
            Write-Host "Files in OpenCV_DIR:"
            Get-ChildItem -Path $cmake_dir | Format-Table Name, Length

            # Check for specific files needed by CMake
            if (Test-Path "$cmake_dir\OpenCVConfig.cmake") {
              Write-Host "Verified OpenCVConfig.cmake exists"
            } else {
              Write-Host "ERROR: OpenCVConfig.cmake not found in $cmake_dir"
              exit 1
            }
          } else {
            Write-Host "ERROR: OpenCVConfig.cmake not found in the OpenCV installation directory"
            exit 1
          }

      - name: Debug environment variables
        if: runner.os == 'Windows'
        run: |
          Write-Host "OpenCV_DIR: $env:OpenCV_DIR"
          Write-Host "OPENCV_BIN: $env:OPENCV_BIN"
          Write-Host "Checking if OpenCVConfig.cmake exists:"
          if (Test-Path "$env:OpenCV_DIR\OpenCVConfig.cmake") {
            Write-Host "OpenCVConfig.cmake exists at $env:OpenCV_DIR\OpenCVConfig.cmake"
          } else {
            Write-Host "OpenCVConfig.cmake does NOT exist at $env:OpenCV_DIR\OpenCVConfig.cmake"
          }

          # List all environment variables
          Write-Host "All environment variables:"
          Get-ChildItem env:

          # Create a CMakeInit.txt file to explicitly set OpenCV_DIR
          $cmake_init = @"
set(OpenCV_DIR "$env:OpenCV_DIR" CACHE PATH "OpenCV directory" FORCE)
list(APPEND CMAKE_PREFIX_PATH "$env:OpenCV_DIR")
message(STATUS "CMakeInit.txt: Setting OpenCV_DIR to $env:OpenCV_DIR")
"@
          $cmake_init_path = "CMakeInit.txt"
          Set-Content -Path $cmake_init_path -Value $cmake_init
          Write-Host "Created CMakeInit.txt at $cmake_init_path with content:"
          Get-Content $cmake_init_path

          # Verify the file exists
          if (Test-Path $cmake_init_path) {
            Write-Host "Verified CMakeInit.txt exists at $(Resolve-Path $cmake_init_path)"
          } else {
            Write-Host "ERROR: CMakeInit.txt was not created"
            exit 1
          }

      - name: Build wheels for all platforms
        uses: pypa/cibuildwheel@v2.23.3
        with:
          package-dir: .
          output-dir: wheelhouse
        env:
          # Set OpenCV_DIR for cibuildwheel on Windows
          CIBW_ENVIRONMENT_WINDOWS: >-
            OpenCV_DIR="${{ env.OpenCV_DIR }}"
            CMAKE_PREFIX_PATH="${{ env.OpenCV_DIR }}"
            PATH="${{ env.OPENCV_BIN }};%PATH%"
          CIBW_CMAKE_OPTIONS_WINDOWS: >-
            -C "CMakeInit.txt"

      - name: Repair Windows wheels with delvewheel
        if: runner.os == 'Windows'
        run: |
          python -m pip install delvewheel
          Get-ChildItem wheelhouse\*.whl | ForEach-Object {
            delvewheel repair $_.FullName -w wheelhouse\repaired\
          }
          Move-Item wheelhouse\repaired\*.whl wheelhouse\
          Remove-Item -Recurse -Force wheelhouse\repaired\

      - name: Upload wheel artifacts
        uses: actions/upload-artifact@v4
        with:
          name: wheels-${{ matrix.os }}
          path: wheelhouse/*.whl
