name: Build wheels (Ubuntu, macOS & Windows)

on:
  [ push, pull_request ]

jobs:
  build_wheels:
    name: cibuildwheel âžœ ${{ matrix.os }}
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ubuntu-latest, macos-14, windows-latest]

    env:
      # Skip PyPy builds to keep the matrix lean
      CIBW_SKIP: "pp* *musllinux*"

      CIBW_ARCHS_LINUX: "x86_64"
      CIBW_MANYLINUX_X86_64_IMAGE: manylinux_2_28


      CIBW_BEFORE_ALL_LINUX: |
        yum install -y cmake gcc-c++ wget unzip make \
          gtk3-devel libpng-devel libjpeg-turbo-devel \
          jasper-devel openexr-devel libtiff-devel \
          libwebp-devel tbb-devel eigen3-devel
    
        cd /tmp
        wget -O opencv.zip https://github.com/opencv/opencv/archive/4.11.0.zip
        unzip opencv.zip
        mkdir -p opencv-4.11.0/build
        cd opencv-4.11.0/build
        cmake -D CMAKE_BUILD_TYPE=Release \
              -D CMAKE_INSTALL_PREFIX=/usr/local \
              -D CMAKE_INSTALL_RPATH="/usr/local/lib64" \
              -D BUILD_SHARED_LIBS=ON \
              -D BUILD_opencv_world=ON \
              -D BUILD_opencv_apps=OFF \
              -D BUILD_opencv_calib3d=OFF \
              -D BUILD_opencv_core=ON \
              -D BUILD_opencv_dnn=OFF \
              -D BUILD_opencv_features2d=OFF \
              -D BUILD_opencv_flann=OFF \
              -D BUILD_opencv_gapi=OFF \
              -D BUILD_opencv_highgui=ON \
              -D BUILD_opencv_imgcodecs=ON \
              -D BUILD_opencv_imgproc=ON \
              -D BUILD_opencv_ml=OFF \
              -D BUILD_opencv_objdetect=OFF \
              -D BUILD_opencv_photo=OFF \
              -D BUILD_opencv_stitching=OFF \
              -D BUILD_opencv_ts=OFF \
              -D BUILD_opencv_video=OFF \
              -D BUILD_opencv_videoio=OFF \
              -D BUILD_opencv_aruco=OFF \
              -D BUILD_opencv_bgsegm=OFF \
              -D BUILD_opencv_bioinspired=OFF \
              -D BUILD_opencv_ccalib=OFF \
              -D BUILD_opencv_datasets=OFF \
              -D BUILD_opencv_dpm=OFF \
              -D BUILD_opencv_face=OFF \
              -D BUILD_opencv_fuzzy=OFF \
              -D BUILD_opencv_hfs=OFF \
              -D BUILD_opencv_line_descriptor=OFF \
              -D BUILD_opencv_mcc=OFF \
              -D BUILD_opencv_optflow=OFF \
              -D BUILD_opencv_phase_unwrapping=OFF \
              -D BUILD_opencv_plot=OFF \
              -D BUILD_opencv_quality=OFF \
              -D BUILD_opencv_rapid=OFF \
              -D BUILD_opencv_reg=OFF \
              -D BUILD_opencv_rgbd=OFF \
              -D BUILD_opencv_saliency=OFF \
              -D BUILD_opencv_shape=OFF \
              -D BUILD_opencv_stereo=OFF \
              -D BUILD_opencv_structured_light=OFF \
              -D BUILD_opencv_superres=OFF \
              -D BUILD_opencv_surface_matching=OFF \
              -D BUILD_opencv_text=OFF \
              -D BUILD_opencv_tracking=OFF \
              -D BUILD_opencv_xfeatures2d=OFF \
              -D BUILD_opencv_ximgproc=OFF \
              -D BUILD_opencv_xobjdetect=OFF \
              -D BUILD_opencv_xphoto=OFF \
              -D BUILD_EXAMPLES=OFF \
              -D BUILD_TESTS=OFF \
              -D BUILD_PERF_TESTS=OFF \
              -D BUILD_DOCS=OFF \
              -D BUILD_STATIC_LIBS=OFF \
              -D WITH_1394=OFF \
              -D WITH_ADE=OFF \
              -D WITH_ARAVIS=OFF \
              -D WITH_CSTRIPES=OFF \
              -D WITH_CUDA=OFF \
              -D WITH_CUBLAS=OFF \
              -D WITH_NVCUVID=OFF \
              -D WITH_EIGEN=OFF \
              -D WITH_FFMPEG=OFF \
              -D WITH_GDAL=OFF \
              -D WITH_GIGEAPI=OFF \
              -D WITH_GPHOTO2=OFF \
              -D WITH_GSTREAMER=OFF \
              -D WITH_GTK=OFF \
              -D WITH_GTK_2_X=OFF \
              -D WITH_HALIDE=OFF \
              -D WITH_INF_ENGINE=OFF \
              -D WITH_IPP=OFF \
              -D WITH_ITT=OFF \
              -D WITH_JASPER=OFF \
              -D WITH_JPEG=ON \
              -D WITH_LAPACK=OFF \
              -D WITH_LIBREALSENSE=OFF \
              -D WITH_MFX=OFF \
              -D WITH_NGRAPH=OFF \
              -D WITH_OPENCL=OFF \
              -D WITH_OPENCLAMDBLAS=OFF \
              -D WITH_OPENCLAMDFFT=OFF \
              -D WITH_OPENEXR=ON \
              -D WITH_OPENGL=OFF \
              -D WITH_OPENMP=OFF \
              -D WITH_OPENNI=OFF \
              -D WITH_OPENNI2=OFF \
              -D WITH_OPENVX=OFF \
              -D WITH_PNG=OFF \
              -D WITH_PVAPI=OFF \
              -D WITH_QT=OFF \
              -D WITH_QUIRC=OFF \
              -D WITH_TBB=OFF \
              -D WITH_TIFF=ON \
              -D WITH_V4L=OFF \
              -D WITH_VA=OFF \
              -D WITH_VFW=OFF \
              -D WITH_WEBP=OFF \
              -D WITH_WIN32UI=OFF \
              -D WITH_XIMEA=OFF \
              -D WITH_XINE=OFF \
              -D ENABLE_CCACHE=OFF \
              -D ENABLE_FAST_MATH=OFF \
              -D ENABLE_PROFILING=OFF \
              -D ENABLE_SOLUTION_FOLDERS=OFF \
              -D ENABLE_PRECOMPILED_HEADERS=OFF \
              -D OPENCV_ENABLE_MEMALIGN=OFF \
              -D OPENCV_FORCE_NEON=OFF \
              -D OPENCV_GENERATE_PKGCONFIG=OFF \
              -D OPENCV_IPP_GAUSSIAN_BLUR=OFF \
              -D OPENCV_IPP_MEAN=OFF \
              -D OPENCV_IPP_MINMAX=OFF \
              -D OPENCV_IPP_SUM=OFF \
              -D OPENCV_SKIP_CPU_BASELINE_RESUME=OFF \
              -D BUILD_opencv_python2=OFF \
              -D BUILD_opencv_python3=OFF \
              -D INSTALL_PYTHON_EXAMPLES=OFF \
              -D BUILD_JAVA=OFF \
              -D INSTALL_C_EXAMPLES=OFF \
              -D WITH_IMGCODEC_HDR=OFF \
              -D WITH_IMGCODEC_PXM=OFF \
              -D WITH_IMGCODEC_SUNRASTER=OFF \
              -D WITH_IMGCODEC_WEBP=OFF \
              -D OPENCV_ENABLE_NONFREE=OFF \
              ..
        make -j"$(nproc)"
        make install
        ldconfig

      CIBW_ENVIRONMENT_PASS_LINUX: "LD_LIBRARY_PATH=/usr/local/lib64:$LD_LIBRARY_PATH"
      CIBW_ENVIRONMENT_LINUX: "LD_LIBRARY_PATH=/usr/local/lib64:$LD_LIBRARY_PATH"

      CIBW_ARCHS_WINDOWS: AMD64

      MACOSX_DEPLOYMENT_TARGET: '14.0'
      CIBW_ENVIRONMENT: 'MACOSX_DEPLOYMENT_TARGET=14.0'
      CIBW_BEFORE_BUILD_MACOS: "brew install opencv"

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install build tooling
        run: python -m pip install --upgrade pip cibuildwheel==2.23.3 build==1.2.2.post1 wheel==0.45.1

      - name: Set up OpenCV on Windows
        if: runner.os == 'Windows'
        run: |
          $ver='4.11.0'
          $exe="$env:TEMP\opencv.exe"
          Invoke-WebRequest -Uri "https://github.com/opencv/opencv/releases/download/$ver/opencv-$ver-windows.exe" -OutFile $exe
          Start-Process -FilePath $exe -ArgumentList "-y","-oC:\" -NoNewWindow -Wait
          Remove-Item $exe
          $base='C:\opencv'
          $bin="$base\build\x64\vc16\bin"
          $cmake_dir="$base\build\x64\vc16\lib"

          # Check if OpenCVConfig.cmake exists in the expected location
          if (Test-Path "$cmake_dir\OpenCVConfig.cmake") {
            Write-Host "Found OpenCVConfig.cmake in $cmake_dir"
          } else {
            Write-Host "OpenCVConfig.cmake not found in $cmake_dir, searching for it..."
            $opencv_config = Get-ChildItem -Path $base -Recurse -Filter "OpenCVConfig.cmake" | Select-Object -First 1
            if ($opencv_config) {
              $cmake_dir = $opencv_config.Directory.FullName
              Write-Host "Found OpenCVConfig.cmake in $cmake_dir"
            } else {
              Write-Host "OpenCVConfig.cmake not found in the OpenCV installation directory"
              exit 1
            }
          }

          # Add bin directory to PATH
          $env:Path += ";$bin"
          # Set OpenCV_DIR for CMake to find OpenCV
          $env:OpenCV_DIR = $cmake_dir
          # Set environment variables for subsequent steps
          echo "OPENCV_BIN=$bin" | Out-File -FilePath $env:GITHUB_ENV -Append
          echo "OPENCV_DIR=$cmake_dir" | Out-File -FilePath $env:GITHUB_ENV -Append

          # Create a CMakeInit.txt file to explicitly set OpenCV_DIR
          $cmake_init = @"
          set(OpenCV_DIR "$cmake_dir" CACHE PATH "OpenCV directory" FORCE)
          list(APPEND CMAKE_PREFIX_PATH "$cmake_dir")
          message(STATUS "CMakeInit.txt: Setting OpenCV_DIR to $cmake_dir")
          "@
          $cmake_init_path = "$(Get-Location)\CMakeInit.txt"
          Set-Content -Path $cmake_init_path -Value $cmake_init
          Write-Host "Created CMakeInit.txt with content:"
          Get-Content $cmake_init_path
          
          # List files in the OpenCV_DIR to verify contents
          Write-Host "Files in OpenCV_DIR:"
          Get-ChildItem -Path $env:OpenCV_DIR | Format-Table Name, Length

      - name: Build wheels for all platforms
        uses: pypa/cibuildwheel@v2.23.3
        with:
          package-dir: .
          output-dir: wheelhouse
        env:
          # Set OpenCV_DIR for cibuildwheel on Windows
          CIBW_ENVIRONMENT_WINDOWS: >
            OpenCV_DIR="C:\\opencv\\build\\x64\\vc16\\lib"
            CMAKE_PREFIX_PATH="C:\\opencv\\build\\x64\\vc16\\lib"
            PATH="C:\\opencv\\build\\x64\\vc16\\bin;$PATH"

      - name: Repair Windows wheels with delvewheel
        if: runner.os == 'Windows'
        env:
          # Set OpenCV_DIR for cibuildwheel on Windows
          CIBW_ENVIRONMENT_WINDOWS: >
            OpenCV_DIR="C:\\opencv\\build\\x64\\vc16\\lib"
            CMAKE_PREFIX_PATH="C:\\opencv\\build\\x64\\vc16\\lib"
            PATH="C:\\opencv\\build\\x64\\vc16\\bin;$PATH"
        run: |
          python -m pip install delvewheel
          mkdir -Force wheelhouse\repaired
          Get-ChildItem wheelhouse\*.whl | ForEach-Object {
            delvewheel repair $_.FullName -w wheelhouse\repaired\ --add-path C:\opencv\build\x64\vc16\bin
          }
          Move-Item wheelhouse\repaired\*.whl wheelhouse\ -Force
          Remove-Item -Recurse -Force wheelhouse\repaired\

      - name: Upload wheel artifacts
        uses: actions/upload-artifact@v4
        with:
          name: wheels-${{ matrix.os }}
          path: wheelhouse/*.whl
